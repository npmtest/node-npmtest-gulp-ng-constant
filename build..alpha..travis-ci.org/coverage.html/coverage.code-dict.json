{"/home/travis/build/npmtest/node-npmtest-gulp-ng-constant/test.js":"/* istanbul instrument in package npmtest_gulp_ng_constant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ng-constant/lib.npmtest_gulp_ng_constant.js":"/* istanbul instrument in package npmtest_gulp_ng_constant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_ng_constant = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_ng_constant = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ng-constant/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-ng-constant && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_ng_constant */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_ng_constant\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_ng_constant.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_ng_constant.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_ng_constant.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_ng_constant.__dirname +\n                    '/lib.npmtest_gulp_ng_constant.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ng-constant/node_modules/gulp-ng-constant/index.js":"'use strict';\n\nvar fs = require('fs');\nvar yaml = require('js-yaml');\nvar path = require('path');\nvar gutil = require('gulp-util');\nvar through = require('through2');\n\nvar _ = require('lodash');\n\nvar TEMPLATE_PATH = path.join(__dirname, 'tpls', 'constant.tpl.ejs');\nvar DEFAULT_WRAP_PATH = path.join(__dirname, 'tpls', 'default-wrapper.tpl.ejs');\nvar AMD_WRAP_PATH = path.join(__dirname, 'tpls', 'amd-wrapper.tpl.ejs');\nvar COMMONJS_WRAP_PATH = path.join(__dirname, 'tpls', 'commonjs-wrapper.tpl.ejs');\nvar defaultWrapper, amdWrapper, commonjsWrapper;\n\nvar defaults = {\n  space: '\\t',\n  merge: false,\n  deps: null,\n  stream: false,\n  wrap: false,\n  template: undefined,\n  templatePath: TEMPLATE_PATH\n};\n\nfunction ngConstantPlugin(opts) {\n\n  var options = _.merge({}, defaults, opts);\n  var template = options.template || readFile(options.templatePath);\n  var stream = through.obj(objectStream);\n\n  if (options.stream) {\n    stream.end(new gutil.File({ path: 'ngConstants.json' }));\n  }\n\n  return stream;\n\n  function objectStream(file, enc, cb) {\n    var _this = this;\n\n    if (file.isStream()) {\n      _this.emit('error', pluginError('Streaming not supported'));\n      return cb();\n    }\n\n    try {\n      var data = file.isNull() ? {} : yaml.safeLoad(file.contents);\n\n      // Create the module string\n      var result = _.template(template)({\n        moduleName: getModuleName(data, options, file),\n        deps:       getModuleDeps(data, options),\n        constants:  getConstants(data, options)\n      });\n\n      // Handle wrapping\n      if (!options.wrap) { options.wrap = data.wrap; }\n      result = wrap(result, options);\n\n      file.path = getFilePath(file.path);\n      file.contents = new Buffer(result);\n      _this.push(file);\n    } catch (err) {\n      err.fileName = file.path;\n      _this.emit('error', pluginError(err));\n    }\n\n    cb();\n  }\n}\n\nfunction getModuleName(data, options, file) {\n  var name = options.name || data.name;\n  if (!name) {\n    var extension = path.extname(file.path);\n    name = path.basename(file.path, extension);\n  }\n\n  return name;\n}\n\nfunction getModuleDeps(data, options) {\n  if (options.deps === false || data.deps === false) {\n    return false;\n  }\n\n  return options.deps || data.deps || [];\n}\n\nfunction getConstants(data, options) {\n  var opts = options || {};\n  if (typeof opts.constants === 'string') {\n    opts.constants = JSON.parse(opts.constants);\n  }\n\n  var dataCnst = data.constants || data;\n  var method = opts.merge ? 'merge' : 'extend';\n  var input = _[method]({}, dataCnst, opts.constants);\n  var constants =  _.map(input, function (value, name) {\n    return {\n      name: name,\n      value: stringify(value, opts.space)\n    };\n  });\n\n  return constants;\n}\n\nfunction getFilePath(filePath) {\n  return gutil.replaceExtension(filePath, '.js');\n}\n\nfunction pluginError(msg) {\n  return new gutil.PluginError('gulp-tslint-log', msg);\n}\n\nfunction wrap(input, options) {\n  var wrapper = options.wrap || '<%= __ngModule %>';\n  if (wrapper === true) {\n    if (!defaultWrapper) { defaultWrapper = readFile(DEFAULT_WRAP_PATH); }\n    wrapper = defaultWrapper;\n  } else if (wrapper === 'amd') {\n    if (!amdWrapper) { amdWrapper = readFile(AMD_WRAP_PATH); }\n    wrapper = amdWrapper;\n  } else if (wrapper === 'commonjs') {\n    if (!commonjsWrapper) { commonjsWrapper = readFile(COMMONJS_WRAP_PATH); }\n    wrapper = commonjsWrapper;\n  }\n  return _.template(wrapper)(_.merge({ '__ngModule': input }, options));\n}\n\nfunction readFile(filepath) {\n  return fs.readFileSync(filepath, 'utf8');\n}\n\nfunction stringify(value, space) {\n  return _.isUndefined(value) ? 'undefined' : JSON.stringify(value, null, space);\n}\n\n_.extend(ngConstantPlugin, {\n  getConstants: getConstants,\n  getFilePath: getFilePath,\n  wrap: wrap\n});\n\nmodule.exports = ngConstantPlugin;\n","/home/travis/build/npmtest/node-npmtest-gulp-ng-constant/node_modules/gulp-ng-constant/spec/gulpNgConstantSpec.js":"'use strict';\n\nvar ngConstant = require('../index');\nvar _ = require('lodash');\nvar gutil = require('gulp-util');\nvar through = require('through2');\n\n// TODO: add custom matcher to test the modules name expect(output).toHaveModule('ngConstants') that uses regexp\n// TODO: consider adding a toString() property to the vinyl file (e.g. file.text)\n\ndescribe('ngConstant', function () {\n\n  describe('file stream', function () {\n    it('load the constants from a YAML file', function (done) {\n      var contents = 'message: happy yaml';\n      getStream({contents: new Buffer(contents)})\n        .pipe(ngConstant())\n        .on('data', function (file) {\n          expect(file.contents.toString()).toContain('constant(\"message\", \"happy yaml\")');\n          done();\n        });\n    });\n\n    it ('loads the constants from a JSON file', function (done) {\n      var contents = '{ \"message\": \"valid JSON\" }';\n      getStream({contents: new Buffer(contents)})\n        .pipe(ngConstant())\n        .on('data', function (file) {\n          expect(file.contents.toString()).toContain('constant(\"message\", \"valid JSON\")');\n          done();\n        });\n    });\n\n    it ('extends the constants from a JSON file with the ones defined in the config', function (done) {\n      var contents = '{ \"lastName\": \"Gomez\", \"message\": \"message from JSON\" }';\n      getStream({contents: new Buffer(contents)})\n        .pipe(ngConstant({constants: {message: 'message from config', greet: 'hello'}}))\n        .on('data', function (file) {\n          var output = file.contents.toString();\n          expect(output).toContain('constant(\"lastName\", \"Gomez\")');\n          expect(output).not.toContain('message from JSON');\n          expect(output).toContain('constant(\"greet\", \"hello\")');\n          done();\n        });\n    });\n  });\n\n  describe('name', function () {\n    it ('uses the streamed file name by default', function (done) {\n      getStream({path: 'myConstantsFile.json'})\n      .pipe(ngConstant())\n      .on('data', function (file) {\n        expect(file.contents.toString()).toContain('module(\"myConstantsFile\"');\n        done();\n      });\n    });\n\n    it ('creates a modules with \"ngConstants\" name by default for new streams', function (done) {\n      evalNgConstant({name: undefined, stream: true}, function (_, output) {\n        expect(output).toContain('module(\"ngConstants\"');\n        done();\n      });\n    });\n\n    it ('creates a module with the given name', function (done) {\n      evalNgConstant({name: 'myConstantsModule'}, function (_, output) {\n        expect(output).toContain('module(\"myConstantsModule\"');\n        done();\n      });\n    });\n  });\n\n  describe('deps', function () {\n    it ('creates a new modules by default', function (done) {\n      evalNgConstant({name: 'defaultDeps', deps: undefined}, function (_, output) {\n        expect(output).toContain('module(\"defaultDeps\", [])');\n        done();\n      });\n    });\n\n    it ('adds the given dependencies', function (done) {\n      evalNgConstant({name: 'withDeps', deps: ['ngAnimate']}, function (_, output) {\n        expect(output).toContain('module(\"withDeps\", [\"ngAnimate\"])');\n        done();\n      });\n    });\n\n    it ('adds constants to an existing module when set to `false`', function (done) {\n      evalNgConstant({name: 'noDeps', deps: false}, function (_, output) {\n        expect(output).toContain('module(\"noDeps\")');\n        done();\n      });\n    });\n  });\n\n  describe('stream', function () {\n    it ('returns an empty open stream when set to `false`', function () {\n      var plugin = ngConstant({stream: false});\n      expect(plugin._readableState.ended).toBe(false);\n      expect(plugin._readableState.length).toBe(0);\n    });\n\n    it ('returns a closed stream with a file when set to `true`', function () {\n      var stream = ngConstant({stream: true});\n      expect(stream._readableState.ended).toBe(true);\n      expect(stream._readableState.length).toBe(1);\n    });\n  });\n});\n\ndescribe('ngConstant.getConstants', function () {\n  it('returns an array with the constants key and json string value', function () {\n    var data = { constants: { hello: { foo: 'bar' } } };\n    var result = ngConstant.getConstants(data);\n    expect(result[0]).toEqual({name: 'hello', value: '{\"foo\":\"bar\"}'});\n  });\n\n  it('extends the data.constants with the options.constants', function () {\n    var data = { constants: { hello: 'andrew' } };\n    var opts = { constants: { hello: 'world' } };\n    var result = ngConstant.getConstants(data, opts);\n    expect(result[0]).toEqual({ name: 'hello', value: '\"world\"' });\n  });\n\n  it('uses the data object if data.constants is not available', function () {\n    var data = { hello: 'andrew' };\n    var result = ngConstant.getConstants(data);\n    expect(result[0]).toEqual({ name: 'hello', value: '\"andrew\"' });\n  });\n\n  it('accepts a JSON string as constants from the options', function () {\n    var opts = { constants: JSON.stringify({ hello: 'world' }) };\n    var result = ngConstant.getConstants({}, opts);\n    expect(result[0]).toEqual({ name: 'hello', value: '\"world\"' });\n  });\n\n  it('stringifies the value with the given option.space', function () {\n    var data = { constants: { hello: { foo: 'bar' } } };\n    var result = ngConstant.getConstants(data, { space: '' });\n    expect(result[0].value).toEqual('{\"foo\":\"bar\"}');\n    result = ngConstant.getConstants(data, { space: ' ' });\n    expect(result[0].value).toEqual('{\\n \"foo\": \"bar\"\\n}');\n  });\n\n  it('merges the data.constants with the options.constants', function () {\n    var data = { constants: { message: 'hello', user: { firstName: 'andrew' }  } };\n    var opts = { merge: true, constants: { message: 'foo', user: { lastName: 'smith' } } };\n    var result = ngConstant.getConstants(data, opts);\n    var messageConstant = result[0];\n    expect(messageConstant).toEqual({ name: 'message', value: '\"foo\"' });\n    var userValue = result[1].value;\n    expect(userValue).toContain('\"firstName\":\"andrew\"');\n    expect(userValue).toContain('\"lastName\":\"smith\"');\n  });\n});\n\ndescribe('ngConstant.getFilePath', function() {\n  it('returns the file path from the src plugin with the .js extension', function() {\n    expect(ngConstant.getFilePath('/foo/bar/config.json', {})).toBe('/foo/bar/config.js');\n  });\n});\n\nfunction getStream(fileOptions) {\n  var defaults = {path: 'constants.json'};\n  var file = new gutil.File(_.extend(defaults, fileOptions));\n  var stream = through.obj(gutil.noop());\n  stream.end(file);\n  return stream;\n}\n\nfunction evalNgConstant(options, callback) {\n  var defaults = {stream: true, constants: {greeting: 'hello' }};\n  ngConstant(_.merge(defaults, options)).on('data', function (file) {\n    callback(file, file.contents.toString());\n  });\n}\n"}